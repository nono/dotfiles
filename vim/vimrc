""""" Plugins

" vim-plug
call plug#begin('~/.vim/plugged')
let g:polyglot_disabled = ['go']
" Colors
Plug 'mhartington/oceanic-next'
Plug 'arcticicestudio/nord-vim'
" Common
Plug 'bling/vim-airline'
Plug 'tpope/vim-vinegar'
Plug 'knubie/vim-kitty-navigator', {'do': 'cp ./*.py ~/.config/kitty/'}
Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }
" Commands
Plug 'junegunn/fzf',            { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'Shougo/deoplete.nvim',    { 'do': ':UpdateRemotePlugins' }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-commentary',    { 'on': '<Plug>Commentary' }
Plug 'junegunn/vim-easy-align', { 'on': '<Plug>(EasyAlign)' }
Plug 'benekastah/neomake',      { 'on': 'Neomake' }
Plug 'sbdchd/neoformat',        { 'on': 'Neoformat' }
Plug 'chrisbra/vim-diff-enhanced'
" Typing help
Plug 'ervandew/supertab'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-endwise', { 'for': ['ruby', 'sh', 'zsh', 'vim', 'lua', 'c', 'cpp'] }
Plug 'tpope/vim-surround'
" Filetype
Plug 'runoshun/vim-alloy',             { 'for': 'alloy' }
Plug 'gleam-lang/gleam.vim',           { 'for': 'gleam' }
Plug 'fatih/vim-go',                   { 'for': 'go' }
Plug 'fladson/vim-kitty',              { 'for': 'kitty' }
Plug 'tpope/vim-bundler',              { 'for': 'ruby' }
Plug 'JulesWang/css.vim',              { 'for': ['css', 'scss'] }
Plug 'nono/lezer.vim',                 { 'for': 'lezer' }
Plug 'vim-scripts/TLA',                { 'for': 'tla' }
" polyglot can cause issues if not plugged last
Plug 'sheerun/vim-polyglot'
call plug#end()

" Matchit
runtime! macros/matchit.vim

" Mappings
vnoremap <c-a> :call IncrementColumn()<cr>
vmap <Enter> <Plug>(EasyAlign)
vmap / <Plug>Commentary
noremap <c-t> :FZF<cr>
let g:kitty_navigator_no_mappings = 1
nnoremap <silent> <C-Left> :KittyNavigateLeft<cr>
nnoremap <silent> <C-Down> :KittyNavigateDown<cr>
nnoremap <silent> <C-Up> :KittyNavigateUp<cr>
nnoremap <silent> <C-Right> :KittyNavigateRight<cr>

" Config
let g:neoformat_only_msg_on_error = 1
let g:SuperTabDefaultCompletionType = "<C-P>"
let g:deoplete#enable_at_startup = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#neomake#enabled = 0
let g:vim_json_syntax_conceal = 0
let g:easy_align_delimiters = {
    \ '/': {
    \     'pattern':         '//\+\|/\*\|\*/',
    \     'delimiter_align': 'l',
    \     'ignore_groups':   ['!Comment'] }
    \ }
let g:LanguageClient_serverCommands = {
    \ 'elixir': ['~/bin/elixir-ls/language_server.sh'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'javascript.jsx': ['javascript-typescript-stdio'],
    \ 'ruby': ['solargraph', 'stdio'],
    \ 'rust': ['~/.cargo/bin/ra_lsp_server'],
    \ }


""""" Options globales

syntax on
filetype on
filetype plugin indent on
if has("gui_running")
	set bg=dark
	colo OceanicNext
	set gfn=Fira\ Code\ 12
	set gcr=a:blinkon0
	set go=acegit
	" Fix borders of fullscreen GUI
	" let s:border = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'gui')
	" exe 'silent !echo ''style "vimfix" { bg[NORMAL] = "' . escape(s:border, '#') . '" }'''.
	"             \' > ~/.gtkrc.mine'
	" exe 'silent !echo ''widget "vim-main-window.*GtkForm" style "vimfix"'''.
	"             \' >> ~/.gtkrc.mine'
else
	set bg=dark
	colo nord
	au BufEnter,CursorHold,CursorHoldI * silent! checktime
endif

set autoindent
set autoread            " Auto-reload modified files (with no local changes)
set backspace=indent,eol,start
set clipboard=unnamed
set complete-=i
set completeopt=menuone
set dir-=.              " Don't put temporary files in current directory
set encoding=utf-8
set fileformat=unix
set formatoptions+=j    " Delete comment character when joining commented lines
set grepformat=%f:%l:%c:%m
set grepprg=rg\ --vimgrep
set incsearch
set inccommand=nosplit
set iskeyword+=-
set laststatus=2        " Always show the statusbar
set lazyredraw
set list
set listchars=tab:\ \ ,nbsp:‚ê£,trail:‚ãÖ
set mouse=nvi
set noequalalways
set noexpandtab
set nohlsearch
set noignorecase
set nojoinspaces
set nospell
set nostartofline
set nowrap
set nowrapscan
set nrformats-=octal
set pastetoggle=<F11>
set ruler
set scrolloff=3
set shiftwidth=0
set shortmess=atI
set showcmd
set showmatch
set sidescrolloff=5
set smartindent
set smarttab
set spelllang=fr,en
set spellsuggest=best,3
set tabstop=4
set textwidth=0
set title
set ttimeout
set ttimeoutlen=100
set virtualedit=block
set wildignore+=*.o,*.so,*.a,*.pyc,*.8,*.bs.js
set wildmenu


""""" Mappings

nnoremap <F1> K
nnoremap <F8> :set spell!<CR>
nnoremap Q A

" Do not show stupid q: window
nnoremap q: :q

" Don't make a # force column zero.
inoremap # X<BS>#

" Ctrl-+ to increase font size
noremap <C-kplus> :let &guifont=substitute(&guifont, '\d\+', '\=eval(submatch(0)+1)', '')<CR>
noremap <C-kminus> :let &guifont=substitute(&guifont, '\d\+', '\=eval(submatch(0)-1)', '')<CR>

" Completion
inoremap <C-@> <C-P>

vnoremap < <gv
vnoremap > >gv

" Navigate between views with Ctrl + arrows
if has("nvim")
	" Done with vim-kitty-navigator
	au FocusGained * :checktime
else
	map Od <C-W><Left>
	map Ob <C-W><Down>
	map Oa <C-W><Up>
	map Oc <C-W><Right>
	noremap <C-Left> <C-W><Left>
	noremap <C-Down> <C-W><Down>
	noremap <C-Up> <C-W><Up>
	noremap <C-Right> <C-W><Right>
endif


""""" Autodetect filetypes

augroup vimrc
	au BufRead,BufNewFile bip.conf set ft=bip
	au BufRead,BufNewFile Capfile,Vagrantfile,Guardfile set ft=ruby
	au BufRead,BufNewFile *.ecr set ft=html
	au BufRead,BufNewFile *.dc set ft=dotclear
	au BufRead,BufNewFile *.mjml set ft=xml
	au BufRead,BufNewFile *.txt,*.md,*.mdx,*.cozy-note set ft=markdown
	au BufRead,BufNewFile *.ditaa set ft=ditaa
	au BufRead,BufNewFile *.gv set ft=dot
	au BufRead,BufNewFile Xdefaults set ft=xdefaults
	au BufRead,BufNewFile README,INSTALL,ChangeLog set ft=txt
	au BufRead,BufNewFile ~/.vim/doc/*.txt set ft=help nospell
	au BufRead,BufNewFile manifest.webapp,manifest.konnector set ft=json

	au BufWritePre *.cr,*.css,*.gleam,*.rs,*.re,*.rei undojoin | Neoformat
	au BufWritePost *.c,*.js,*.coffee,*.rb,*.sh Neomake
augroup END


""""" Misc

let g:browser = 'x-www-browser'
let g:netrw_liststyle=1
let g:load_doxygen_syntax=1

" Show trailing white-space
let ruby_space_errors = 1
let c_space_errors = 1
let javascript_space_errors = 1

source $HOME/.vim/abbrev.vim

" SudoW command to save a file as root
command! -bar -nargs=0 SudoW   :silent exe "write !sudo tee % >/dev/null"|silent edit!

" Some aliases
command! E :Explore
command! S :Sexplore
command! V :Vexplore

" Automatically give executable permissions if file begins with #! and contains '/bin/' in the path
function! MakeScriptExecuteable()
	if getline(1) =~ "^#!.*/bin/"
		silent !chmod +x <afile>
	endif
endfunction
au BufWritePost * call MakeScriptExecuteable()
