""""" Plugins

" vim-plug
call plug#begin('~/.vim/plugged')
" Common
Plug 'bling/vim-airline'
Plug 'tpope/vim-vinegar'
" Commands
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary',    { 'on': '<Plug>Commentary' }
Plug 'junegunn/vim-easy-align', { 'on': '<Plug>(EasyAlign)' }
Plug 'benekastah/neomake',      { 'on': 'Neomake' }
Plug 'chrisbra/vim-diff-enhanced'
" Typing help
Plug 'ervandew/supertab'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-endwise', { 'for': ['ruby', 'elixir', 'sh', 'zsh', 'vim', 'lua', 'c', 'cpp'] }
Plug 'tpope/vim-surround'
" Filetype
Plug 'tpope/vim-bundler',            { 'for': 'ruby' }
Plug 'kchmck/vim-coffee-script',     { 'for': 'coffee' }
Plug 'hail2u/vim-css3-syntax',       { 'for': 'css' }
Plug 'elixir-lang/vim-elixir',       { 'for': 'elixir' }
Plug 'tpope/vim-haml',               { 'for': 'ruby' }
Plug 'othree/html5.vim',             { 'for': 'html' }
Plug 'digitaltoad/vim-jade',         { 'for': 'jade' }
Plug 'pangloss/vim-javascript',      { 'for': 'javascript' }
Plug 'nono/jquery.vim',              { 'for': 'javascript' }
Plug 'mxw/vim-jsx',                  { 'for': 'javascript' }
Plug 'elzr/vim-json',                { 'for': 'json' }
Plug 'groenewege/vim-less',          { 'for': 'less' }
Plug 'fatih/vim-go',                 { 'for': 'go' }
Plug 'evanmiller/nginx-vim-syntax',  { 'for': 'nginx' }
Plug 'vim-pandoc/vim-pandoc-syntax', { 'for': 'pandoc' }
Plug 'wavded/vim-stylus',            { 'for': 'stylus' }
" Colors
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/base16-vim'
Plug 'mgutz/gosu-colors'
call plug#end()

" Matchit
runtime! macros/matchit.vim

" Neomake
let g:neomake_javascript_jsx6hint_maker = {
    \ 'exe': 'jsxhint',
    \ 'args': ['--verbose', '--jsx-only', '--harmony'],
    \ 'errorformat': '%A%f: line %l\, col %v\, %m \(%t%*\d\)',
    \ }
let g:neomake_javascript_enabled_makers = ['jsx6hint']

" Mappings
vnoremap <c-a> :call IncrementColumn()<cr>
vmap <Enter> <Plug>(EasyAlign)
vmap / <Plug>Commentary

" Config
let g:SuperTabDefaultCompletionType = "<C-P>"
let g:go_fmt_command = "goimports"
let g:airline_powerline_fonts = 1
let g:html5_rdfa_attributes_complete = 0
let g:vim_json_syntax_conceal = 0


""""" Options globales

syntax on
filetype on
filetype plugin indent on
if has("gui_running")
	set bg=dark
	colo bluetiful
	set gfn=Inconsolata\ for\ Powerline\ 13
	set gcr=a:blinkon0
	set go=acegit
	" Fix borders of fullscreen GUI
	" let s:border = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'gui')
	" exe 'silent !echo ''style "vimfix" { bg[NORMAL] = "' . escape(s:border, '#') . '" }'''.
	"             \' > ~/.gtkrc.mine'
	" exe 'silent !echo ''widget "vim-main-window.*GtkForm" style "vimfix"'''.
	"             \' >> ~/.gtkrc.mine'
else
	let base16colorspace=256
	set bg=dark
	colo base16-bright
	au BufEnter,CursorHold,CursorHoldI * silent! checktime
endif

set autoindent
set autoread            " Auto-reload modified files (with no local changes)
set backspace=indent,eol,start
set complete-=i
set completeopt=menuone
set dir-=.              " Don't put temporary files in current directory
set encoding=utf-8
set fileformat=unix
set formatoptions+=j    " Delete comment character when joining commented lines
set grepformat=%f:%l:%c:%m
set grepprg=ag
set incsearch
set iskeyword+=-
set laststatus=2        " Always show the statusbar
set lazyredraw
set list
set listchars=tab:\ \ ,nbsp:␣,trail:⋅
set noequalalways
set noexpandtab
set nohlsearch
set noignorecase
set nojoinspaces
set nospell
set nostartofline
set nowrap
set nowrapscan
set nrformats-=octal
set pastetoggle=<F11>
set ruler
set scrolloff=3
set shiftwidth=0
set shortmess=atI
set showcmd
set showmatch
set sidescrolloff=5
set smartindent
set smarttab
set spelllang=fr,en
set spellsuggest=best,3
set tabstop=4
set textwidth=0
set title
set ttimeout
set ttimeoutlen=100
set virtualedit=block
set wildignore+=*.o,*.so,*.a,*.pyc,*.8
set wildmenu


""""" Mappings

nnoremap <F1> K
nnoremap <F8> :set spell!<CR>

" Don't make a # force column zero.
inoremap # X<BS>#

" Ctrl-+ to increase font size
noremap <C-kplus> :let &guifont=substitute(&guifont, '\d\+', '\=eval(submatch(0)+1)', '')<CR>
noremap <C-kminus> :let &guifont=substitute(&guifont, '\d\+', '\=eval(submatch(0)-1)', '')<CR>

" Navigate between views with Ctrl + arrows
map Ïd <C-Left>
map Ïb <C-Down>
map Ïa <C-Up>
map Ïc <C-Right>
noremap <C-Left> <C-W><Left>
noremap <C-Down> <C-W><Down>
noremap <C-Up> <C-W><Up>
noremap <C-Right> <C-W><Right>

" Completion
inoremap <C-@> <C-P>

vnoremap < <gv
vnoremap > >gv


""""" Autodetect filetypes

augroup vimrc
	au BufRead,BufNewFile bip.conf set ft=bip
	au BufRead,BufNewFile haproxy.cfg set ft=haproxy
	au BufRead,BufNewFile Capfile,Vagrantfile,Guardfile set ft=ruby
	au BufRead,BufNewFile *.dc set ft=dotclear
	au BufRead,BufNewFile *.wiki set ft=moin
	au BufRead,BufNewFile *.t2t set ft=txt2tags
	au BufRead,BufNewFile *.textile set ft=textile
	au BufRead,BufNewFile *.txt,*.md set ft=pandoc et tw=78
	au BufRead,BufNewFile *.ditaa set ft=ditaa
	au BufRead,BufNewFile Xdefaults set ft=xdefaults
	au BufRead,BufNewFile README,INSTALL,ChangeLog set ft=txt
	au BufRead,BufNewFile ~/.vim/doc/*.txt set ft=help nospell
	au BufRead,BufNewFile *.es6 set ft=javascript
	au BufRead,BufNewFile Gomfile set ft=ruby

	au BufWritePost *.c,*.js,*.jsx,*.rb,*.sh Neomake
augroup END


""""" Misc

let g:browser = 'x-www-browser'
let g:netrw_liststyle=1
let g:load_doxygen_syntax=1

" Show trailing white-space
let ruby_space_errors = 1
let c_space_errors = 1
let javascript_space_errors = 1

source $HOME/.vim/abbrev.vim

" SudoW command to save a file as root
command! -bar -nargs=0 SudoW   :silent exe "write !sudo tee % >/dev/null"|silent edit!

" Some aliases
command! E :Explore
command! S :Sexplore
command! V :Vexplore

" Automatically give executable permissions if file begins with #! and contains '/bin/' in the path
function! MakeScriptExecuteable()
	if getline(1) =~ "^#!.*/bin/"
		silent !chmod +x <afile>
	endif
endfunction
au BufWritePost * call MakeScriptExecuteable()
