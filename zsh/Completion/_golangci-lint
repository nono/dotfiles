#compdef _golangci-lint golangci-lint


function _golangci-lint {
  local -a commands

  _arguments -C \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "cache:Cache control and information"
      "completion:Output completion script"
      "config:Config"
      "help:Help"
      "linters:List current linters configuration"
      "run:Run this tool in cloud on every github pull request in https://golangci.com for free (public repos)"
      "version:Version"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  cache)
    _golangci-lint_cache
    ;;
  completion)
    _golangci-lint_completion
    ;;
  config)
    _golangci-lint_config
    ;;
  help)
    _golangci-lint_help
    ;;
  linters)
    _golangci-lint_linters
    ;;
  run)
    _golangci-lint_run
    ;;
  version)
    _golangci-lint_version
    ;;
  esac
}


function _golangci-lint_cache {
  local -a commands

  _arguments -C \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "clean:Clean cache"
      "status:Show cache status"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  clean)
    _golangci-lint_cache_clean
    ;;
  status)
    _golangci-lint_cache_status
    ;;
  esac
}

function _golangci-lint_cache_clean {
  _arguments \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]'
}

function _golangci-lint_cache_status {
  _arguments \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]'
}


function _golangci-lint_completion {
  local -a commands

  _arguments -C \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "bash:Output bash completion script"
      "zsh:Output zsh completion script"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  bash)
    _golangci-lint_completion_bash
    ;;
  zsh)
    _golangci-lint_completion_zsh
    ;;
  esac
}

function _golangci-lint_completion_bash {
  _arguments \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]'
}

function _golangci-lint_completion_zsh {
  _arguments \
    '(-h --help)'{-h,--help}'[help for zsh]' \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]'
}


function _golangci-lint_config {
  local -a commands

  _arguments -C \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "path:Print used config path"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  path)
    _golangci-lint_config_path
    ;;
  esac
}

function _golangci-lint_config_path {
  _arguments \
    '--out-format[Format of output: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml]:' \
    '--print-issued-lines[Print lines of code with issue]' \
    '--print-linter-name[Print linter name in issue line]' \
    '--modules-download-mode[Modules download mode. If not empty, passed as -mod=<mode> to go tools]:' \
    '--issues-exit-code[Exit code when issues were found]:' \
    '*--build-tags[Build tags]:' \
    '--timeout[Timeout for total work]:' \
    '--tests[Analyze tests (*_test.go)]' \
    '--print-resources-usage[Print avg and max memory usage of golangci-lint and total time]' \
    '(-c --config)'{-c,--config}'[Read config from file path `PATH`]:' \
    '--no-config[Don'\''t read config]' \
    '*--skip-dirs[Regexps of directories to skip]:' \
    '--skip-dirs-use-default[Use or not use default excluded directories:
  - (^|/)vendor($|/)
  - (^|/)third_party($|/)
  - (^|/)testdata($|/)
  - (^|/)examples($|/)
  - (^|/)Godeps($|/)
  - (^|/)builtin($|/)
]' \
    '*--skip-files[Regexps of files to skip]:' \
    '(*-E *--enable)'{\*-E,\*--enable}'[Enable specific linter]:' \
    '(*-D *--disable)'{\*-D,\*--disable}'[Disable specific linter]:' \
    '--disable-all[Disable all linters]' \
    '(*-p *--presets)'{\*-p,\*--presets}'[Enable presets (bugs|complexity|format|performance|style|unused) of linters. Run '\''golangci-lint linters'\'' to see them. This option implies option --disable-all]:' \
    '--fast[Run only fast linters from enabled linters set (first run won'\''t be fast)]' \
    '(*-e *--exclude)'{\*-e,\*--exclude}'[Exclude issue by regexp]:' \
    '--exclude-use-default[Use or not use default excludes:
  # errcheck: Almost all programs ignore errors on these functions and in most cases it'\''s ok
  - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked

  # golint: Annoying issue about not having a comment. The rare codebase has such comments
  - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)

  # golint: False positive when tests are defined in package '\''test'\''
  - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this

  # govet: Common false positives
  - (possible misuse of unsafe.Pointer|should have signature)

  # staticcheck: Developers tend to write in C-style with an explicit '\''break'\'' in a '\''switch'\'', so it'\''s ok to ignore
  - ineffective break statement. Did you mean to break out of the outer loop

  # gosec: Too many false-positives on '\''unsafe'\'' usage
  - Use of unsafe calls should be audited

  # gosec: Too many false-positives for parametrized shell calls
  - Subprocess launch(ed with variable|ing should be audited)

  # gosec: Duplicated errcheck checks
  - G104

  # gosec: Too many issues in popular repos
  - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)

  # gosec: False positive is triggered by '\''src, err := ioutil.ReadFile(filename)'\''
  - Potential file inclusion via variable
]' \
    '--max-issues-per-linter[Maximum issues count per one linter. Set to 0 to disable]:' \
    '--max-same-issues[Maximum count of issues with the same text. Set to 0 to disable]:' \
    '(-n --new)'{-n,--new}'[Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.
It'\''s a super-useful option for integration of golangci-lint into existing large codebase.
It'\''s not practical to fix all existing issues at the moment of integration: much better to not allow issues in new code.
For CI setups, prefer --new-from-rev=HEAD~, as --new can skip linting the current patch if any scripts generate unstaged files before golangci-lint runs.]' \
    '--new-from-rev[Show only new issues created after git revision `REV`]:' \
    '--new-from-patch[Show only new issues created in git patch with file path `PATH`]:' \
    '--fix[Fix found issues (if it'\''s supported by the linter)]' \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]'
}


function _golangci-lint_help {
  local -a commands

  _arguments -C \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "linters:Help about linters"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  linters)
    _golangci-lint_help_linters
    ;;
  esac
}

function _golangci-lint_help_linters {
  _arguments \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]'
}

function _golangci-lint_linters {
  _arguments \
    '--out-format[Format of output: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml]:' \
    '--print-issued-lines[Print lines of code with issue]' \
    '--print-linter-name[Print linter name in issue line]' \
    '--modules-download-mode[Modules download mode. If not empty, passed as -mod=<mode> to go tools]:' \
    '--issues-exit-code[Exit code when issues were found]:' \
    '*--build-tags[Build tags]:' \
    '--timeout[Timeout for total work]:' \
    '--tests[Analyze tests (*_test.go)]' \
    '--print-resources-usage[Print avg and max memory usage of golangci-lint and total time]' \
    '(-c --config)'{-c,--config}'[Read config from file path `PATH`]:' \
    '--no-config[Don'\''t read config]' \
    '*--skip-dirs[Regexps of directories to skip]:' \
    '--skip-dirs-use-default[Use or not use default excluded directories:
  - (^|/)vendor($|/)
  - (^|/)third_party($|/)
  - (^|/)testdata($|/)
  - (^|/)examples($|/)
  - (^|/)Godeps($|/)
  - (^|/)builtin($|/)
]' \
    '*--skip-files[Regexps of files to skip]:' \
    '(*-E *--enable)'{\*-E,\*--enable}'[Enable specific linter]:' \
    '(*-D *--disable)'{\*-D,\*--disable}'[Disable specific linter]:' \
    '--disable-all[Disable all linters]' \
    '(*-p *--presets)'{\*-p,\*--presets}'[Enable presets (bugs|complexity|format|performance|style|unused) of linters. Run '\''golangci-lint linters'\'' to see them. This option implies option --disable-all]:' \
    '--fast[Run only fast linters from enabled linters set (first run won'\''t be fast)]' \
    '(*-e *--exclude)'{\*-e,\*--exclude}'[Exclude issue by regexp]:' \
    '--exclude-use-default[Use or not use default excludes:
  # errcheck: Almost all programs ignore errors on these functions and in most cases it'\''s ok
  - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked

  # golint: Annoying issue about not having a comment. The rare codebase has such comments
  - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)

  # golint: False positive when tests are defined in package '\''test'\''
  - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this

  # govet: Common false positives
  - (possible misuse of unsafe.Pointer|should have signature)

  # staticcheck: Developers tend to write in C-style with an explicit '\''break'\'' in a '\''switch'\'', so it'\''s ok to ignore
  - ineffective break statement. Did you mean to break out of the outer loop

  # gosec: Too many false-positives on '\''unsafe'\'' usage
  - Use of unsafe calls should be audited

  # gosec: Too many false-positives for parametrized shell calls
  - Subprocess launch(ed with variable|ing should be audited)

  # gosec: Duplicated errcheck checks
  - G104

  # gosec: Too many issues in popular repos
  - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)

  # gosec: False positive is triggered by '\''src, err := ioutil.ReadFile(filename)'\''
  - Potential file inclusion via variable
]' \
    '--max-issues-per-linter[Maximum issues count per one linter. Set to 0 to disable]:' \
    '--max-same-issues[Maximum count of issues with the same text. Set to 0 to disable]:' \
    '(-n --new)'{-n,--new}'[Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.
It'\''s a super-useful option for integration of golangci-lint into existing large codebase.
It'\''s not practical to fix all existing issues at the moment of integration: much better to not allow issues in new code.
For CI setups, prefer --new-from-rev=HEAD~, as --new can skip linting the current patch if any scripts generate unstaged files before golangci-lint runs.]' \
    '--new-from-rev[Show only new issues created after git revision `REV`]:' \
    '--new-from-patch[Show only new issues created in git patch with file path `PATH`]:' \
    '--fix[Fix found issues (if it'\''s supported by the linter)]' \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]'
}

function _golangci-lint_run {
  _arguments \
    '--out-format[Format of output: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml]:' \
    '--print-issued-lines[Print lines of code with issue]' \
    '--print-linter-name[Print linter name in issue line]' \
    '--modules-download-mode[Modules download mode. If not empty, passed as -mod=<mode> to go tools]:' \
    '--issues-exit-code[Exit code when issues were found]:' \
    '*--build-tags[Build tags]:' \
    '--timeout[Timeout for total work]:' \
    '--tests[Analyze tests (*_test.go)]' \
    '--print-resources-usage[Print avg and max memory usage of golangci-lint and total time]' \
    '(-c --config)'{-c,--config}'[Read config from file path `PATH`]:' \
    '--no-config[Don'\''t read config]' \
    '*--skip-dirs[Regexps of directories to skip]:' \
    '--skip-dirs-use-default[Use or not use default excluded directories:
  - (^|/)vendor($|/)
  - (^|/)third_party($|/)
  - (^|/)testdata($|/)
  - (^|/)examples($|/)
  - (^|/)Godeps($|/)
  - (^|/)builtin($|/)
]' \
    '*--skip-files[Regexps of files to skip]:' \
    '(*-E *--enable)'{\*-E,\*--enable}'[Enable specific linter]:' \
    '(*-D *--disable)'{\*-D,\*--disable}'[Disable specific linter]:' \
    '--disable-all[Disable all linters]' \
    '(*-p *--presets)'{\*-p,\*--presets}'[Enable presets (bugs|complexity|format|performance|style|unused) of linters. Run '\''golangci-lint linters'\'' to see them. This option implies option --disable-all]:' \
    '--fast[Run only fast linters from enabled linters set (first run won'\''t be fast)]' \
    '(*-e *--exclude)'{\*-e,\*--exclude}'[Exclude issue by regexp]:' \
    '--exclude-use-default[Use or not use default excludes:
  # errcheck: Almost all programs ignore errors on these functions and in most cases it'\''s ok
  - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked

  # golint: Annoying issue about not having a comment. The rare codebase has such comments
  - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)

  # golint: False positive when tests are defined in package '\''test'\''
  - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this

  # govet: Common false positives
  - (possible misuse of unsafe.Pointer|should have signature)

  # staticcheck: Developers tend to write in C-style with an explicit '\''break'\'' in a '\''switch'\'', so it'\''s ok to ignore
  - ineffective break statement. Did you mean to break out of the outer loop

  # gosec: Too many false-positives on '\''unsafe'\'' usage
  - Use of unsafe calls should be audited

  # gosec: Too many false-positives for parametrized shell calls
  - Subprocess launch(ed with variable|ing should be audited)

  # gosec: Duplicated errcheck checks
  - G104

  # gosec: Too many issues in popular repos
  - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)

  # gosec: False positive is triggered by '\''src, err := ioutil.ReadFile(filename)'\''
  - Potential file inclusion via variable
]' \
    '--max-issues-per-linter[Maximum issues count per one linter. Set to 0 to disable]:' \
    '--max-same-issues[Maximum count of issues with the same text. Set to 0 to disable]:' \
    '(-n --new)'{-n,--new}'[Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.
It'\''s a super-useful option for integration of golangci-lint into existing large codebase.
It'\''s not practical to fix all existing issues at the moment of integration: much better to not allow issues in new code.
For CI setups, prefer --new-from-rev=HEAD~, as --new can skip linting the current patch if any scripts generate unstaged files before golangci-lint runs.]' \
    '--new-from-rev[Show only new issues created after git revision `REV`]:' \
    '--new-from-patch[Show only new issues created in git patch with file path `PATH`]:' \
    '--fix[Fix found issues (if it'\''s supported by the linter)]' \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]'
}

function _golangci-lint_version {
  _arguments \
    '--color[Use color when printing; can be '\''always'\'', '\''auto'\'', or '\''never'\'']:' \
    '(-j --concurrency)'{-j,--concurrency}'[Concurrency (default NumCPU)]:' \
    '--cpu-profile-path[Path to CPU profile output file]:' \
    '--mem-profile-path[Path to memory profile output file]:' \
    '--trace-path[Path to trace output file]:' \
    '(-v --verbose)'{-v,--verbose}'[verbose output]' \
    '--version[Print version]'
}

compdef _golangci-lint golangci-lint
